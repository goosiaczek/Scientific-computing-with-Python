
"""Solve the 1D heat equation with initial and bondary conditions not used
during the classes. Send the script and the figure"""

import numpy as np
import matplotlib.pyplot as plt

D, Nx, Nt, L, T = 1.0, 20, 250, 1.0, 0.1
t = np.linspace(0, T, num=Nt + 1, dtype=float)
x = np.linspace(0, L, num=Nx + 1, dtype=float)
dx = x[1] - x[0]
dt = t[1] - t[0]
r = D * dt / (dx * dx)
print("r = {}".format(r))
assert r < 0.5

u = np.empty((Nx + 1, Nt + 1), dtype=float)  # macierz na wszystkie wyniki

# initial condition, t=0
u[8:12, :] = 0.6

# boundary condition, x=0 and x=L=1
u[0, :] = 0.0  # cold end
u[Nx, :] = 0.5  # hot end

# iteration/solution the linear algebraic equations
for j in range(Nt):
    # vectorization
    u[1:-1, j + 1] = r * u[:-2, j] + (1 - 2 * r) * u[1:-1, j] + r * u[2:, j]

# visualization
print(u)
plt.title("1D heat equation")
plt.xlabel("Time")  # odwrotnie!
plt.ylabel("x")

plt.imshow(u[:,::3], cmap='magma', interpolation='hamming')

plt.colorbar()
plt.show()
