"""Solve the 1D wave equation with initial and bondary conditions not used
during the classes. Send the script and the figure.
Note that u(x,0) (the position of the strig) should be continous and consistent
with boundary conditions."""

import numpy as np
import matplotlib.pyplot as plt

# Given mesh points as arrays x and t (x[i], t[j])
Nx, Nt, L, T, c = 20, 100, 1.0, 2.0, 1.0
t = np.linspace(0, T, num=Nt + 1, dtype=float)  # t in [0,T]
x = np.linspace(0, L, num=Nx + 1, dtype=float)  # x in [0,L]
dx = x[1] - x[0]
dt = t[1] - t[0]
# Nt = len(t)-1
# Nx = len(x)-1
r = (c * dt / dx) ** 2
print("r = {}".format(r))
assert r < 1

u = np.empty((Nx + 1, Nt + 1), dtype=float)  # all results

# initial condition, t=0, j=0
u[5,5]

assert abs(u[0, 0]) < 1e-6 and abs(u[Nx, 0]) < 1e-6

# boundary condition, x=0 and x=L
u[0, :] = 0.0
u[Nx, :] = 0.5

# for i in range(1,Nx):   # initial condition j=1
u[1:-1, 1] = u[1:-1, 0] + (r * 0.5) * (u[:-2, 0] - 2 * u[1:-1, 0] + u[2:, 0])

# iteration/solution the linear algebraic equations
for j in range(1, Nt):
    # for i in range(1,Nx):
    u[1:-1, j + 1] = -u[1:-1, j - 1] + 2 * u[1:-1, j] + r * (
                u[:-2, j] - 2 * u[1:-1, j] + u[2:, j])

# visualization
plt.title("1D wave equation")
plt.xlabel("t")
plt.ylabel("x")

plt.imshow(u, cmap='BuPu_r', interpolation='nearest')

plt.colorbar()
plt.show()
