"""Write tests for the Vector class (Homework 6) using the 'unittest'
or 'pytest' module."""

import math
import pytest


class Vector:
    """Klasa służąca do reprezentacji wektorów w trzech wymiarach"""

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __repr__(self):
        return f"Vector ({self.x}, {self.y}, {self.z})"

    def __eq__(self, other):
        if self.x == other.x and self.y == other.y and self.z == other.z:
            return True
        else:
            return False

    def __ne__(self, other):
        return not self == other

    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y, self.z + other.z)

    def __sub__(self, other):
        return Vector(self.x - other.x, self.y - other.y, self.z - other.z)

    def __mul__(self, other):
        return self.x * other.x + self.y * other.y + self.z * other.z

    def cross(self, other):
        return Vector(self.y * other.z - self.z * other.y,
                      self.z * other.x - self.x * other.z,
                      self.x * other.y - self.y * other.x)

    def length(self):
        return math.sqrt(self.x ** 2 + self.y ** 2 + self.z ** 2)

    def __hash__(self):
        return hash((self.x, self.y, self.z))


# Exemplary 'pytest' tests:

def test_equality():
    v = Vector(1, 2, 3)
    w = Vector(2, -3, 2)
    assert v != w


# this test is failed:
def test_sum():
    v = Vector(1, 2, 3)
    w = Vector(2, -3, 2)
    assert v + w == Vector(3, -1, 55)


def test_difference():
    v = Vector(1, 2, 3)
    w = Vector(2, -3, 2)
    assert v - w == Vector(-1, 5, 1)


def test_multiplication():
    v = Vector(1, 2, 3)
    w = Vector(2, -3, 2)
    assert v * w == 2


def test_cross():
    v = Vector(1, 2, 3)
    w = Vector(2, -3, 2)
    assert v.cross(w) == Vector(13, 4, -7)


def test_length():
    v = Vector(1, 2, 3)
    w = Vector(2, -3, 2)
    assert v.length() == math.sqrt(14)


def test_len():
    v = Vector(1, 2, 3)
    w = Vector(2, -3, 2)
    s = set([v, v, w])
    assert len(s) == 2
